#!/bin/bash

# üöÄ Mobile-First Performance Testing Script
# This script runs Lighthouse tests for both mobile and desktop

echo "üöÄ Starting Mobile-First Performance Testing..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
BASE_URL="https://ikhsystems.com"
PAGES=(
  "/en/"
  "/en/services"
  "/en/contacts"
  "/cs/"
  "/cs/services"
  "/cs/contacts"
)

# Create results directory
mkdir -p lighthouse-results
cd lighthouse-results

echo -e "${BLUE}üìä Testing ${#PAGES[@]} pages for mobile and desktop performance...${NC}"

# Function to run Lighthouse test
run_lighthouse() {
  local url=$1
  local device=$2
  local output_file=$3
  
  echo -e "${YELLOW}Testing: ${url} (${device})${NC}"
  
  lighthouse "${BASE_URL}${url}" \
    --only-categories=performance \
    --form-factor=${device} \
    --throttling-method=devtools \
    --output=json \
    --output-path="${output_file}" \
    --chrome-flags="--headless --no-sandbox --disable-gpu" \
    --quiet
}

# Test all pages
for page in "${PAGES[@]}"; do
  # Clean page name for filename
  clean_page=$(echo "$page" | sed 's/[\/]/-/g' | sed 's/^-//')
  
  # Mobile test
  mobile_file="mobile-${clean_page}-$(date +%Y%m%d-%H%M%S).json"
  run_lighthouse "$page" "mobile" "$mobile_file"
  
  # Desktop test
  desktop_file="desktop-${clean_page}-$(date +%Y%m%d-%H%M%S).json"
  run_lighthouse "$page" "desktop" "$desktop_file"
done

echo -e "${GREEN}‚úÖ All tests completed!${NC}"
echo -e "${BLUE}üìÅ Results saved in: lighthouse-results/${NC}"

# Generate summary report
echo -e "${YELLOW}üìä Generating performance summary...${NC}"

cat > performance-summary.md << EOF
# üöÄ Performance Test Results

**Test Date:** $(date)
**Base URL:** ${BASE_URL}

## üì± Mobile Performance (Target: 90+)

| Page | Performance Score | FCP | LCP | TBT | CLS |
|------|------------------|-----|-----|-----|-----|
EOF

# Extract scores from JSON files
for json_file in mobile-*.json; do
  if [ -f "$json_file" ]; then
    page_name=$(echo "$json_file" | sed 's/mobile-//' | sed 's/-[0-9]*\.json//')
    score=$(jq -r '.categories.performance.score * 100 | round' "$json_file" 2>/dev/null || echo "N/A")
    fcp=$(jq -r '.audits["first-contentful-paint"].displayValue' "$json_file" 2>/dev/null || echo "N/A")
    lcp=$(jq -r '.audits["largest-contentful-paint"].displayValue' "$json_file" 2>/dev/null || echo "N/A")
    tbt=$(jq -r '.audits["total-blocking-time"].displayValue' "$json_file" 2>/dev/null || echo "N/A")
    cls=$(jq -r '.audits["cumulative-layout-shift"].displayValue' "$json_file" 2>/dev/null || echo "N/A")
    
    echo "| ${page_name} | ${score} | ${fcp} | ${lcp} | ${tbt} | ${cls} |" >> performance-summary.md
  fi
done

cat >> performance-summary.md << EOF

## üñ•Ô∏è Desktop Performance (Target: 95+)

| Page | Performance Score | FCP | LCP | TBT | CLS |
|------|------------------|-----|-----|-----|-----|
EOF

# Extract scores from desktop JSON files
for json_file in desktop-*.json; do
  if [ -f "$json_file" ]; then
    page_name=$(echo "$json_file" | sed 's/desktop-//' | sed 's/-[0-9]*\.json//')
    score=$(jq -r '.categories.performance.score * 100 | round' "$json_file" 2>/dev/null || echo "N/A")
    fcp=$(jq -r '.audits["first-contentful-paint"].displayValue' "$json_file" 2>/dev/null || echo "N/A")
    lcp=$(jq -r '.audits["largest-contentful-paint"].displayValue' "$json_file" 2>/dev/null || echo "N/A")
    tbt=$(jq -r '.audits["total-blocking-time"].displayValue' "$json_file" 2>/dev/null || echo "N/A")
    cls=$(jq -r '.audits["cumulative-layout-shift"].displayValue' "$json_file" 2>/dev/null || echo "N/A")
    
    echo "| ${page_name} | ${score} | ${fcp} | ${lcp} | ${tbt} | ${cls} |" >> performance-summary.md
  fi
done

cat >> performance-summary.md << EOF

## üéØ Optimization Recommendations

### High Priority (Mobile)
- [ ] Optimize LCP images (target: <2.5s)
- [ ] Reduce TBT (target: <200ms)
- [ ] Minimize unused JavaScript
- [ ] Implement critical CSS

### Medium Priority (Desktop)
- [ ] Further optimize bundle size
- [ ] Implement advanced caching
- [ ] Optimize font loading

## üìà Next Steps
1. Review detailed JSON reports for specific issues
2. Implement recommended optimizations
3. Re-run tests to measure improvements
4. Set up continuous monitoring

---
*Generated by Mobile-First Performance Testing Script*
EOF

echo -e "${GREEN}üìä Performance summary generated: lighthouse-results/performance-summary.md${NC}"

# Check if jq is installed for JSON parsing
if ! command -v jq &> /dev/null; then
  echo -e "${YELLOW}‚ö†Ô∏è  jq is not installed. Install it for better JSON parsing:${NC}"
  echo "   macOS: brew install jq"
  echo "   Ubuntu: sudo apt install jq"
  echo "   Windows: choco install jq"
fi

echo -e "${BLUE}üéâ Performance testing complete!${NC}"
